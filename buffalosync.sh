#!/bin/bash
# Description : 
# this script aims to send files not present on the buffalo device that 
#are present in the folder given in argument
# The folder to update must have the same name on the local host and the 
# buffalo device

# Usage : buffalosync.sh [OPTIONS] <folder1> [ folder2 folder3 ]

#########################################################################
SCRIPT_NAME=$0
# buffalo hostname
BUFFALO=buffalo
# Default configuration :
# performs the synchronisation
DRY_RUN=0
# Use ftp not ssh for file transfer
SCP=0
# Do not create remote hierarchy
CREATE_REMOTE=0
# Do not synchronise recursively
RECURSIVE=0

# get the absolute pathname from folder given in argument
get_absolute_folder()
{
  local f=$1
  if [ ${f:0:1} != "/" ]; then
    f=`pwd`/$f
  fi
  pushd . > /dev/null
  cd $f
  f=`pwd`
  popd > /dev/null
  echo $f
}

# remove temp files
cleanup()
{
  rm -f "$LOCAL_LS"
  rm -f "$REMOTE_LS"
  rm -f "$SORT_LOCAL_LS"
  rm -f "$SORT_REMOTE_LS"
  rm -f "$LS_DIFF"
  rm -f "$MISSING_FILES"
  rm -f "$FTP_SCRIPT"
}

# cleanup and exit with errorcode given in argument
finish()
{
  cleanup
  exit $1
}

# retrieve filelist in order to make diff between them
get_filelist()
{
  # check if local video folder exists
  if [ ! -d "$LOCAL_VID_FOLDER" ]; then
    echo "Error $LOCAL_VID_FOLDER does not exists"
    finish 1
  fi
  # retrieve local filelist
  ls $LOCAL_VID_FOLDER > $LOCAL_LS

  # retrieve remote filelist
  if [ $CREATE_REMOTE -eq 1 ]; then
    ssh admin@$BUFFALO "mkdir -p \"$REMOTE_VID_FOLDER\""
    # check if ssh ended well
    if [ $? -ne 0 ]; then
      echo "Error with ssh command"
      finish 1
    fi
  fi
  ssh admin@$BUFFALO "ls \"$REMOTE_VID_FOLDER\"" > $REMOTE_LS
  # check if ssh ended well
  if [ $? -ne 0 ]; then
    echo "Error with ssh command"
    finish 1
  fi

}

# sends missing files with ftp script generated by gen_ftp_script
ftp_send_files()
{
  ftp -v $BUFFALO < $FTP_SCRIPT
}


# sends missing files using scp
scp_send_files()
{
  while read line; do
    cmd="scp \"$LOCAL_VID_FOLDER/$line\" admin@$BUFFALO:\"$REMOTE_VID_FOLDER\""
    eval $cmd
    if [ $? -ne 0 ]; then
      echo error during scp
      finish 1
    fi
  done < $MISSING_FILES
}


# generates ftp commands to transfer missing files
gen_ftp_script()
{
  echo "ascii" > $FTP_SCRIPT
  echo "lcd $LOCAL_VID_FOLDER" >> $FTP_SCRIPT
  echo "cd ${REMOTE_VID_FOLDER#/mnt}" >> $FTP_SCRIPT
  echo pwd >> $FTP_SCRIPT
  while read line; do
    echo "put \"$line\"" >> $FTP_SCRIPT
  done < $MISSING_FILES
  echo "exit" >> $FTP_SCRIPT
}


# synchronise the folder given in argument
process_folder()
{
  if [ ! -d $1 ]; then
    echo "Error $1 does not exists"
    finish 1
  fi
  LOCAL_VID_FOLDER=`get_absolute_folder $1`
  REMOTE_VID_FOLDER=${LOCAL_VID_FOLDER/VideosWin/Videos}
  REMOTE_VID_FOLDER=/mnt/disk1/share/videos/${REMOTE_VID_FOLDER#/media/data/Videos}

  # Temporary files used for processing
  LOCAL_LS=`mktemp /tmp/LOCAL.XXXX`
  REMOTE_LS=`mktemp /tmp/REMOTE.XXXX`
  SORT_LOCAL_LS=$LOCAL_LS.SORT
  SORT_REMOTE_LS=$REMOTE_LS.SORT
  LS_DIFF=`mktemp /tmp/LS_DIFF.XXXX`
  MISSING_FILES=`mktemp /tmp/MISSING_FILES.XXXX`
  FTP_SCRIPT=`mktemp /tmp/FTP_SCRIPT.XXXX`

  # retrieve filelist
  get_filelist
  # ls outputs are not sorted the same way on linkstation and on local host
  sort $LOCAL_LS > $SORT_LOCAL_LS
  sort $REMOTE_LS > $SORT_REMOTE_LS

  diff -U 0 $SORT_LOCAL_LS $SORT_REMOTE_LS >> $LS_DIFF
  update=$?

  # if no diff between two folders exit 
  if [ $update -eq 0 ]; then
    echo $REMOTE_VID_FOLDER is up to date
    cleanup
    return
  fi

  # count the number of files present in local dir and not on remote
  nb_recent_files=`grep -E "^-\<" -c $LS_DIFF`
  if [ $nb_recent_files -eq 0 ]; then
    echo $REMOTE_VID_FOLDER is up to date
    cleanup
    return
  fi

  # extract the missing filenames which are not on remote
  cat $LS_DIFF | grep -E "^-\<" | sed 's/^-//' >> $MISSING_FILES


  # Send the files
  echo "Send the following files"
  cat $MISSING_FILES
  if [ $DRY_RUN -eq 0 ]; then
    if [ $SCP -eq 0 ]; then
      echo "Establishing ftp connection"
      gen_ftp_script
      ftp_send_files
    else
      echo "Establishing ssh connection"
      scp_send_files
    fi
  fi

  cleanup
}

# help message
print_help() {
  echo "USAGE : $SCRIPT_NAME [OPTIONS] <FOLDERS>
  -h | --help      : display this message and exit
  --dry-run        : Do not perform the operations, just print what files would be sent
  --ssh            : Use scp instead of ftp (slower)
  -c | --create    : Create remote hierarchy
  -r | --recursive : Synchronise rerursively

Description : This script will synchronise local folders with remote buffalo device"

}

#########################################################################
# start of script

# Parse options
while [ $# -gt 0 ]; do
  case $1 in 
    -h|--help)        print_help
                      exit;;
    --dry-run)        DRY_RUN=1;;
    --ssh)            SCP=1;;
    -c|--create)      CREATE_REMOTE=1;;
    -r|--recursive)   RECURSIVE=1;;
    *)                FOLDERS="$FOLDERS $1";;
  esac
  shift
done

# Process each folders
for i in $FOLDERS; do
  echo "--- processing $i"
  if [ $RECURSIVE -eq 0 ]; then
    process_folder $i
  else # recursive
    # process each folder of the hierarchy
    for j in `find $i -name "*" -type d`; do
      process_folder $j
    done
  fi
done
exit 0
